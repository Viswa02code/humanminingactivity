/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mininghumanactivity;

import java.io.File;
import java.io.FileInputStream;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import static mininghumanactivity.CleaningPreprocessing.timeOnly;
import static mininghumanactivity.CleaningPreprocessing.transactionData;
import static mininghumanactivity.IMCFrame.allRules;


/**
 *
 * @author Elcot
 */
public class ActivityRecognition extends javax.swing.JFrame {

    /**
     * Creates new form LRFrame
     */
    
    
    public ActivityRecognition() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 102, 0));

        jPanel2.setBackground(new java.awt.Color(102, 51, 0));

        jLabel1.setFont(new java.awt.Font("Andalus", 0, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("ActivityRecognition");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(280, 280, 280)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1))
        );

        jButton1.setText("Activity Recognition");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 181, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 651, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 299, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        ArrayList appId=new ArrayList();
        ArrayList activ=new ArrayList();
        ArrayList appName=new ArrayList();
        try
        {
            String fname="Activities.txt";
            File fe=new File(fname);		
            FileInputStream fis=new FileInputStream(fe);
            byte data[]=new byte[fis.available()];
            fis.read(data);
            fis.close();
            String act=new String(data);
            String sp[]=act.trim().split("\n");
            for(int i=0;i<sp.length;i++)
            {
                String s[]=sp[i].trim().split(" --> ");
                appId.add(s[0].trim());
                activ.add(s[1].trim());
            }
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        try
        {
            String fname="MetaData.txt";
            File fe=new File(fname);		
            FileInputStream fis=new FileInputStream(fe);
            byte data[]=new byte[fis.available()];
            fis.read(data);
            fis.close();
            String act=new String(data);
            String sp[]=act.trim().split("\n");
            for(int i=0;i<sp.length;i++)
            {
                String s[]=sp[i].trim().split(" --> ");                
                appName.add(s[1].trim());
            }
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        
        jTextArea1.setText("");
        jTextArea1.append("No.\tTime\tApplianced Detected\tProbability\tActivity\n");
        
        SimpleDateFormat parser = new SimpleDateFormat("HH:mm");
        
        for(int j=0;j<timeOnly.size();j++)
        {
            String tim=timeOnly.get(j).toString().trim();
            String rule=allRules.get(j).toString().trim();
            
            String appliancesDetected="",activities="";
            double probability=0;
            String sp[]=rule.trim().split("\n");
            for(int i=0;i<sp.length;i++)
            {
                String spk[]=sp[i].trim().split("#");
                String conf=spk[spk.length-1].trim().replaceAll("CONF: ", "");
                double confidence=Double.parseDouble(conf.trim());
                if(probability<confidence)
                {
                    probability=confidence;
                    String rul=spk[0].trim();
                    //appliancesDetected=rul.trim().replaceAll(" ==> "," ");
                    String rp[]=rul.trim().split(" ==> ");
                    
                    ArrayList norepAct=new ArrayList();
                    String allNa="";
                    if(rp[0].trim().contains(" "))
                    {
                        String spa[]=rp[0].trim().split(" ");
                        for(int k=0;k<spa.length;k++)
                        {
                            int index=appId.indexOf(spa[k].trim());
                            String aname=appName.get(index).toString().trim();
                            allNa=allNa+aname.trim()+", ";
                            String ac=activ.get(index).toString().trim();
                            if(!(norepAct.contains(ac.trim())))
                            {
                                norepAct.add(ac.trim());
                            }
                        }
                    }
                    else
                    {
                        int index=appId.indexOf(rp[0].trim());
                        String aname=appName.get(index).toString().trim();
                        allNa=allNa+aname.trim()+", ";
                        String ac=activ.get(index).toString().trim();
                        if(!(norepAct.contains(ac.trim())))
                        {
                            norepAct.add(ac.trim());
                        }
                    }
                    if(rp[1].trim().contains(" "))
                    {
                        String spa[]=rp[1].trim().split(" ");
                        for(int k=0;k<spa.length;k++)
                        {
                            int index=appId.indexOf(spa[k].trim());
                            String aname=appName.get(index).toString().trim();
                            allNa=allNa+aname.trim()+", ";
                            String ac=activ.get(index).toString().trim();
                            if(!(norepAct.contains(ac.trim())))
                            {
                                norepAct.add(ac.trim());
                            }
                        }
                    }
                    else
                    {
                        int index=appId.indexOf(rp[1].trim());
                        String aname=appName.get(index).toString().trim();
                        allNa=allNa+aname.trim()+", ";
                        String ac=activ.get(index).toString().trim();
                        if(!(norepAct.contains(ac.trim())))
                        {
                            norepAct.add(ac.trim());
                        }
                    }
                    appliancesDetected=allNa.substring(0,allNa.lastIndexOf(','));
                    String fordat=norepAct.get(0).toString().trim();
                    for(int k=1;k<norepAct.size();k++)
                    {
                        if(k%2==0)
                        {
                            fordat=fordat+" with "+norepAct.get(k).toString().trim();
                        }
                        else
                        {
                            fordat=fordat+" while doing "+norepAct.get(k).toString().trim();
                        }
                    }                    
                    activities=fordat.trim();
                }
            }
            
            String dp[]=tim.trim().split(" --> ");
            
            try
            {
                if(activities.trim().contains("Preparing"))
                {
                    Date stime = parser.parse(dp[0].trim());                        
                    Date etime = parser.parse(dp[1].trim());

                    Date breakfast = parser.parse("12:00");
                    Date lunch = parser.parse("16:00");

                    if(etime.before(breakfast)) 
                    {
                        String newact=activities.trim().replaceAll("Preparing", "Preparing Breakfast");
                        activities=newact.trim();
                    }
                    else if (etime.after(breakfast) && etime.before(lunch)) 
                    {
                        String newact=activities.trim().replaceAll("Preparing", "Preparing Lunch");
                        activities=newact.trim();
                    }
                    else if (etime.after(lunch)) 
                    {
                        String newact=activities.trim().replaceAll("Preparing", "Preparing Dinner");
                        activities=newact.trim();
                    }
                }
            
                jTextArea1.append((j+1)+"\t"+tim.trim()+"\t"+appliancesDetected.trim()+"\t"+probability+"\t"+activities.trim()+"\n");
            }
            catch(Exception e)
            {
                e.printStackTrace();
            }
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ActivityRecognition.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ActivityRecognition.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ActivityRecognition.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ActivityRecognition.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ActivityRecognition().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
